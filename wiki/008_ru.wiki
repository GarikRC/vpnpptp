#summary Возможности версии 0.0.8

В версии vpnpptp 0.0.8 реализовано:

1) поддержка беспроводных интерфейсов wlan0..wlan9, что позволяет поднимать vpn не в роутере, а в операционной системе, что особенно важно для роутеров, не поддерживающих pptp,

2) поправлена работа с файерволом для Mandriva 2009,

3) собраны пакеты для 64-битных систем,

4) добавлена проверка на наличие в процессах dhclient, а также на то установлен ли он; добавлено предупреждение при выборе опции получения маршрутов через dhcp о проблемах с dhclient,

5) добавлена кнопка определения IP VPN-сервера, позволяющая также проверить ping VPN-сервера,

6) отказ от опции defaultroute в файле /etc/ppp/peers/имя_соединения,

7) решен вопрос циклически рвущегося и циклически самовосстанавливаемого по механизмам реконнекта соединения (или просто рвущегося соединения в случае невыбранного реконнекта), а также решен вопрос неустанавливаемого соединения - все это было связано с потерей vpn-сервера при поднятом vpn pptp или с несовпадением remote IP address, предоставленного vpn-сервером, с ip-адресом vpn-сервера - эти вопросы решены путем добавления в конфигураторе опции программного добавления маршрута к vpn-серверу,

8) улучшение работы программы с таблицей маршрутизации,

9) улучшен диалог с пользователем - в сообщениях стало содержаться много справочной информации,

10) сохранение резервных копий всех системных файлов, изменяемых программой,

11) исправлено: при выходе из ponoff без аварии иногда для системы не возникало дефолтного шлюза; теперь это событие проверяется, и если дефолтного шлюза нет, то он появляется,

12) время запуска конфигуратора существенно ускорено за счет изменения алгоритма проверки установлен ли пакет pptp-linux и отказа от его установки вообще - пользователю лишь сообщается о проблеме, но проблема автоматически не исправляется, так как на этой стадии интернета часто нет,

13) ускорена работа интернета на порядок за счет добавления параметра --nobuffer,

14) существенно исправлена основополагающая инструкция по настройке vpn в mandriva (http://code.google.com/p/vpnpptp/w/list),

15) ведение базы знаний программы в файле /opt/vpnpptp/hosts о всех ip-адресах vpn-сервера - база знаний ведется и модулем vpnpptp, и модулем ponoff (при выборе опции программного добавления маршрута к vpn-серверу и при задании адреса vpn-сервера по имени),

16) скрипты /etc/ppp/ip-up.d/ip-up и /etc/ppp/ip-down.d/ip-down при выбранной опции программного добавления маршрута к vpn-серверу и при задании адреса vpn-сервера по имени теперь стали динамическими - модуль ponoff заносит в них новые, вновь открывшиеся ему маршруты о новых появившихся в базе знаний программы ip-адресах vpn-сервера, а также немедленно добавляет в таблицу маршрутизации новый, вновь открывшийся ему маршрут, если его в таблице маршрутизации еще нет,

17) при переконфигурировании база знаний программы в файле /opt/vpnpptp/hosts о всех ip-адресах vpn-сервера пересоздается, так как исключительно редко, но в нее теоретически может попадать спам, это также необходимо при смене провайдера, у которого должна быть создана другая база знаний, или провайдер произвел изменения в сети,

18) уменьшение времени дозвона по-умолчанию до 10 секунд и увеличение времени реконнекта по-умолчанию до 3 секунд,

19) добавлены всплывающие балуны из трея для модуля ponoff: о процессе установления соединения, об установлении соединения, об обрыве соединения,

20) ускорено появление иконки ponoff в трее при первом старте программы.

Примечания:

Адрес vpn-сервера может быть задан как по имени так и по IP. Конфигуратор анализирует этот адрес, и если адрес vpn-сервера задан по IP, то конфигуратор при выборе опции программного добавления маршрута к vpn-серверу добавляет маршрут к нему в скрипт /etc/ppp/ip-up.d/ip-up и в скрипт /etc/ppp/ip-up.d/ip-down, а иначе адрес vpn-сервера признается динамическим, так как имени vpn-сервера могут соответствовать несколько ip-адресов (или в частном случае один ip-адрес).
Для адреса vpn-сервера, заданного по имени, при выборе в конфигураторе опции программного добавления маршрута к vpn-серверу, модуль ponoff будет руководствоваться имеющейся (или созданной конфигуратором) базой знаний ip-адресов vpn-сервера - если она будет достаточна, то соединение установится, а если недостаточна, то база знаний дополнится. Если после дополнения базы знаний устанавливается соединение, то при следующем коннекте, если база знаний для нового соединения окажется недостаточной, то она дополнится и т. д. Таким образом, наступит момент, когда база знаний станет полная и соединение будет устанавливаться сразу. При этом не используются никакие иные зависимости пакетов, кроме тех, которые уже есть в системе.
При уже настроенной локальной сети VPN PPTP поднимается, если в этот момент известен маршрут к vpn-серверу или иначе не поднимается если маршрута нет. Но при уже поднятом VPN PPTP, если в таблице маршрутизации отсутствует маршрут к vpn-серверу, то соединение оборвется и по механизмам реконнекта восстановится вновь (или не восстановится если реконнект не выбран), при этом, естественно, интернета нет. И так циклически. Необходимый служебный маршрут к vpn-серверу при уже поднятом VPN PPTP у пользователей мог отсутствовать в таблице маршрутизации по разным причинам: по вине провайдера, неработающему в операционной системе dhclient, неработающему получению маршрутов через dhcp, несовпадением remote IP address, предоставленного vpn-сервером, с ip-адресом vpn-сервера, незанесением этого маршрута к vpn-серверу в поле ввода маршрутов в конфигураторе и т.д.
Если у Вас циклически рвущееся и самовосстанавливаемое по механизмам реконнекта соединение или неустанавливаемое соединение, и Вы хотите независимости конфигуратора vpnpptp от интерфейса управления ponoff, то задание адреса vpn-сервера по IP и выбор опции программного добавления маршрута к vpn-серверу решит эту задачу лучше всего.
Если у Вас адрес vpn-сервера задан по имени, и выбрана опция программного добавления маршрута к vpn-серверу в связи с необходимостью в этой опции, а алгоритм программного добавления маршрута к vpn-серверу не справляется со своей задачей или не устраивает, но очень необходимо программно добавлять маршрут к vpn-серверу, то решение этой задачи - указание IP vpn-сервера и выбор опции программного добавления маршрута к vpn-серверу или ручная маршрутизация через поле для ввода маршрутов в конфигураторе.
Ведение базы знаний программы о всех ip-адресах vpn-сервера ведется по двум методам: через host (из пакета bind-utils) или, в случае его отсутствия в системе, через ping. Первый метод хорош своей скорострельностью и предоставлением одного или нескольких сразу ip-адресов vpn-сервера за раз, второй метод - чуть менее быстрый и характеризуется предоставлением не более одного ip-адреса vpn-сервера за раз, и база знаний наполняется чуть медленнее. Но постепенно, начиная с какого-то момента база знаний уже наполнена всей необходимой информацией, и разница между этими двумя методами практически стирается (через ping только чуть дольше первый старт модуля ponoff). Модуль ponoff при каждом запуске, при каждом реконнекте, при каждом соединении наполняет базу знаний программы о всех ip-адресах vpn-сервера и чем дольше он сидит в трее, тем лучше. Уменьшение времени дозвона ускоряет наполнение базы знаний программы, ведь при каждом звонке модуль ponoff получает новую информацию об ip-адресах vpn-сервера. Необходимость ведения базы знаний программы о всех ip-адресах vpn-сервера связана с тем, что ни один из этих двух методов не дает полноценную информацию за один проход о всех ip-адресах vpn-сервера. База знаний программы о всех ip-адресах vpn-сервера, естественно, используется только если адрес vpn-сервера задан по имени, а описанные алгоритмы действуют только если выбрана опция программного добавления маршрута к vpn-серверу.