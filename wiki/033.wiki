#summary Возможности версии 0.3.3

В версии vpnpptp 0.3.3 реализовано:

1) теперь для всех приложений при опции useepeerdns имеет приоритет /etc/resolvconf/resolv.conf.d/head, что актуально для MagOS,

2) для vpnmandriva теперь используется скрипт /etc/ppp/ip-up.d/mandriva-ip-up, задача которого при опции usepeerdns (она у vpnmandriva включена по-умолчанию всегда) при поднятом VPN создать такой файл /etc/resolv.conf, на первом месте в котором будут DNS из /etc/resolvconf/resolv.conf.d/head (если vpn-сервер предоставил свои DNS), а затем пойдут DNS, полученные от VPN-сервера, то есть подход очень близкий к использованному в проекте vpnpptp,

3) в модуле ponoff исправлен тест Интернета,

4) в утилите vpnmandriva после создания подключения предлагается установить тестовое соединение VPN PPTP и проверить Интернет в режиме диалога, vpnmandriva предлагает повторную проверку Интернета; проверка основана на пинге yandex.ru (а для тестовых параметров соединения - на пинге swissvpn.net), при этом каким бы долгим не был пинг, программа выводит таймер, таймер выводится при любых долгих процессах,

5) vpnmandriva, проверяя Интернет, если находит, что соединение VPN PPTP поднято на настраиваемом интерфейсе, но внешние сайты не пингуются, то проверяет кол-во дефолтных маршрутов с одинаковой метрикой, сообщая если находит несколько дефолтных маршрутов с одинаковой метрикой,

6) исправлено определение модулем ponoff и конфигуратором vpnpptp сетевого интерфейса, на котором поднято VPN, за основу взят /var/run/ppp-имясоединения.pid, создаваемый демоном pppd и лишь затем наличие pppN в ifconfig,

7) ускорен перезапуск net_applet в утилите vpnmandriva,

8) в vpnmandriva при нажатии левой кнопкой мыши на картинке с пингвином вводятся тестовые параметры, работоспособные если интернет уже настроен:
 VPN server: connect.swissvpn.net
 Username: swissvpntest
 Password: swissvpntest

9) vpnmandriva если находит, что соединение уже поднято на настраиваемом интерфейсе, а пользователь хочет вновь поднять соединение на настраиваемом интерфейсе, то происходит ifdown pppN; vpnmandriva предлагает убивать pppd если находит его(их) в процессах, но при этом своего pppd vpnmandriva не убивает,а предпочитает ifdown, убиваются лишь pppd неизвестного происхождения и то с согласия пользователя,

10) все приложения проекта переведены на TAsyncProcess вместо использованного ранее TProcess, демон xl2tpd тоже запускается через TAsyncProcess, поэтому соединение VPN L2TP теперь устанавливается без задержки, которая требовалась ранее для полного запуска демона xl2tpd, и составляла 3 секунды, если демон xl2tpd еще не запущен,

11) также ponoff был ускорен тем, что он сам более не занимается выводом балунов - эту роль теперь выполняет /usr/bin/balloon, который был выделен в отдельную программу из модуля, использованного ранее, балуны теперь имеют приоритет над всеми другими системными балунами, они перекрывают их собой; ускорение происходит за счет того, что ponoff лишь дает balloon'у задачу выводить сообщение, а тот самостоятельно организует очередь поступивших сообщений и вывод их по очереди с учетом времени показа сообщения - это увеличило размер пакета, но оно того стоит; /usr/bin/balloon выводит графические балуны,

12) BuildRequires: fpc-src >= 2.4.2, fpc >= 2.4.2, lazarus >= 0.9.29,

13) добавлена поддержка протокола VPN OpenL2TP: конфигуратор vpnpptp создает файл-конфиг /var/lib/vpnpptp/имясоединения/openl2tpd.conf, создаются также /var/lib/vpnpptp/имясоединения/openl2tp-start, /var/lib/vpnpptp/имясоединения/openl2tp-stop, /var/lib/vpnpptp/default/openl2tp-stop; таким образом используются уже существующие конфиги, созданные VPN PPTP и/или VPN L2TP с небольшими этими дополнениями.

Примечание:

Программе balloon передаются 8 параметров:

- выводимое сообщение,
- заголовок сообщения,
- время, в течение которого сообщение отображается на экране (миллисекунды),
- координата X окна сообщения,
- координата Y окна сообщения,
- размер шрифта сообщения,
- PID предыдущего сообщения или 0 (если 0, то balloon не будет дожидаться окончания вывода предыдущего сообщения, или если 0, то это выводится только первое сообщение),
- рисунок с путем к нему.  

Соединение VPN OpenL2TP поднимается скриптом /var/lib/vpnpptp/имясоединения/openl2tp-start, задача которого создать /etc/ppp/options, добавив в него call имясоединения, скопировать файл /var/lib/vpnpptp/имясоединения/openl2tpd.conf в /etc/openl2tpd.conf, а затем перезапустить сервис openl2tp. Соединение VPN OpenL2TP опускается скриптом /var/lib/vpnpptp/имясоединения/openl2tp-stop, задача которого создать чистый /etc/ppp/options, удалить /etc/openl2tpd.conf, а затем остановить сервис openl2tp. Скрипт /var/lib/vpnpptp/default/openl2tp-stop используется для отключения любых соединений. Добавление в файл /etc/ppp/options строки call имясоединения позволяет использовать опции из файла /etc/ppp/peers/имясоединения, в том числе опцию linkname, позволяющую различать соединения и выполнять различные скрипты поднятия и опускания. Таким образом /etc/openl2tpd.conf и /etc/ppp/options стали динамическими. При этом такой подход позволяет работать с OpenL2TP как в графике, так и без графики. К тому же алгоритм работы VPN OpenL2TP получился достаточно простой и прозрачный.

